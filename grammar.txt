# Minimal RISC-V assembly grammar in EBNF.
# Austin Henley
# 10/5/2020

program ::= {[label] [directive | instruction] [comment] newline}
label ::= symbol ':'
directive ::= '.' symbol {',' symbol}
instruction ::= symbol {',' operand}
operand ::= number '(' symbol ')' | symbol

# Lexer rules in regex-ish.
newline ::= ('\n'|'\r')+
number ::= ('+' | '-')[0-9]+
symbol ::= ([a-zA-Z0-9]('.'?[a-zA-Z0-9])*) | (\"(\\[^\n]|[^"\n])*\")

# Whitespace, commas, and parantheses are token delimiters.
# Spaces and tabs can be used interchangeably and consecutively.
# Symbols, numbers, and number of arguments can be differentiated later.